{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to sotabencheval! You have reached the docs for the sotabencheval library. This library contains a collection of deep learning benchmarks you can use to benchmark your models. It can be used in conjunction with the sotabench website to record results for models, so the community can compare model performance on different tasks, as well as a continuous integration style service for your repository to benchmark your models on each commit. Note sotabencheval is a general benchmarking library, meaning it is designed to support all deep learning frameworks, and requires minimal code integration. There are alternative sotabench APIs you can use that are specialized for particular frameworks, e.g. torchbench for PyTorch. Getting Started : Benchmarking on ImageNet Step One : Create a sotabench.py file in the root of your repository This can contain whatever logic you need to load and process the dataset, and to produce model predictions for it. To record your results for sotabench, initialise an ImageNet evaluator object to name the model (and optionally) link to a paper: from sotabencheval.image_classification import ImageNetEvaluator evaluator = ImageNetEvaluator ( model_name = 'ResNeXt-101-32x8d' , paper_arxiv_id = '1611.05431' ) For each batch of predictions made by your model, pass a dictionary of keys as image IDs and values as output predictions to the evaluator.add method: evaluator . add ( dict ( zip ( image_ids , batch_output ))) Then after you have accumulated all the predictions: evaluator . save () This will ensure results are evaluated and saved when they are run on the sotabench server. Below you can see a working sotabench.py file added to the torchvision repository to test one of its models, integrating the evaluation code from above: import numpy as np import PIL import torch from torch.utils.data import DataLoader from torchvision.models.resnet import resnext101_32x8d import torchvision.transforms as transforms from torchvision.datasets import ImageNet from sotabencheval.image_classification import ImageNetEvaluator from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/imagenet' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' model = resnext101_32x8d ( pretrained = True ) input_transform = transforms . Compose ([ transforms . Resize ( 256 , PIL . Image . BICUBIC ), transforms . CenterCrop ( 224 ), transforms . ToTensor (), transforms . Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]), ]) test_dataset = ImageNet ( DATA_ROOT , split = \"val\" , transform = input_transform , target_transform = None , download = True , ) test_loader = DataLoader ( test_dataset , batch_size = 128 , shuffle = False , num_workers = 4 , pin_memory = True , ) model = model . cuda () model . eval () evaluator = ImageNetEvaluator ( model_name = 'ResNeXt-101-32x8d' , paper_arxiv_id = '1611.05431' ) def get_img_id ( image_name ): return image_name . split ( '/' )[ - 1 ] . replace ( '.JPEG' , '' ) with torch . no_grad (): for i , ( input , target ) in enumerate ( test_loader ): input = input . to ( device = 'cuda' , non_blocking = True ) target = target . to ( device = 'cuda' , non_blocking = True ) output = model ( input image_ids = [ get_img_id ( img [ 0 ]) for img in test_loader . dataset . imgs [ i * test_loader . batch_size :( i + 1 ) * test_loader . batch_size ]] evaluator . add ( dict ( zip ( image_ids , list ( output . cpu () . numpy ())))) evaluator . save () Step Two : Run locally to verify that it works python sotabench.py You can also run the logic in a Jupyter Notebook if that is your preferred workflow. To verify your benchmark will run and all parameters are correct you can use the included CLI checking tool: $ sb check Step Three : Login and connect your repository to sotabench Create an account on sotabench , then head to your user page. Click the Connect a GitHub repository button: Then follow the steps to connect the repositories that you wish to benchmark: After you connect your repository, the sotabench servers will re-evaluate your model on every commit, to ensure the model is working and results are up-to-date - including if you add additional models to the benchmark file. Installation The library requires Python 3.6+. You can install via pip: pip install sotabencheval Support If you get stuck you can head to our Discourse forum where you ask questions on how to use the project. You can also find ideas for contributions, and work with others on exciting projects.","title":"Welcome to sotabencheval!"},{"location":"#welcome-to-sotabencheval","text":"You have reached the docs for the sotabencheval library. This library contains a collection of deep learning benchmarks you can use to benchmark your models. It can be used in conjunction with the sotabench website to record results for models, so the community can compare model performance on different tasks, as well as a continuous integration style service for your repository to benchmark your models on each commit. Note sotabencheval is a general benchmarking library, meaning it is designed to support all deep learning frameworks, and requires minimal code integration. There are alternative sotabench APIs you can use that are specialized for particular frameworks, e.g. torchbench for PyTorch.","title":"Welcome to sotabencheval!"},{"location":"#getting-started-benchmarking-on-imagenet","text":"Step One : Create a sotabench.py file in the root of your repository This can contain whatever logic you need to load and process the dataset, and to produce model predictions for it. To record your results for sotabench, initialise an ImageNet evaluator object to name the model (and optionally) link to a paper: from sotabencheval.image_classification import ImageNetEvaluator evaluator = ImageNetEvaluator ( model_name = 'ResNeXt-101-32x8d' , paper_arxiv_id = '1611.05431' ) For each batch of predictions made by your model, pass a dictionary of keys as image IDs and values as output predictions to the evaluator.add method: evaluator . add ( dict ( zip ( image_ids , batch_output ))) Then after you have accumulated all the predictions: evaluator . save () This will ensure results are evaluated and saved when they are run on the sotabench server. Below you can see a working sotabench.py file added to the torchvision repository to test one of its models, integrating the evaluation code from above: import numpy as np import PIL import torch from torch.utils.data import DataLoader from torchvision.models.resnet import resnext101_32x8d import torchvision.transforms as transforms from torchvision.datasets import ImageNet from sotabencheval.image_classification import ImageNetEvaluator from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/imagenet' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' model = resnext101_32x8d ( pretrained = True ) input_transform = transforms . Compose ([ transforms . Resize ( 256 , PIL . Image . BICUBIC ), transforms . CenterCrop ( 224 ), transforms . ToTensor (), transforms . Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]), ]) test_dataset = ImageNet ( DATA_ROOT , split = \"val\" , transform = input_transform , target_transform = None , download = True , ) test_loader = DataLoader ( test_dataset , batch_size = 128 , shuffle = False , num_workers = 4 , pin_memory = True , ) model = model . cuda () model . eval () evaluator = ImageNetEvaluator ( model_name = 'ResNeXt-101-32x8d' , paper_arxiv_id = '1611.05431' ) def get_img_id ( image_name ): return image_name . split ( '/' )[ - 1 ] . replace ( '.JPEG' , '' ) with torch . no_grad (): for i , ( input , target ) in enumerate ( test_loader ): input = input . to ( device = 'cuda' , non_blocking = True ) target = target . to ( device = 'cuda' , non_blocking = True ) output = model ( input image_ids = [ get_img_id ( img [ 0 ]) for img in test_loader . dataset . imgs [ i * test_loader . batch_size :( i + 1 ) * test_loader . batch_size ]] evaluator . add ( dict ( zip ( image_ids , list ( output . cpu () . numpy ())))) evaluator . save () Step Two : Run locally to verify that it works python sotabench.py You can also run the logic in a Jupyter Notebook if that is your preferred workflow. To verify your benchmark will run and all parameters are correct you can use the included CLI checking tool: $ sb check Step Three : Login and connect your repository to sotabench Create an account on sotabench , then head to your user page. Click the Connect a GitHub repository button: Then follow the steps to connect the repositories that you wish to benchmark: After you connect your repository, the sotabench servers will re-evaluate your model on every commit, to ensure the model is working and results are up-to-date - including if you add additional models to the benchmark file.","title":"Getting Started : Benchmarking on ImageNet"},{"location":"#installation","text":"The library requires Python 3.6+. You can install via pip: pip install sotabencheval","title":"Installation"},{"location":"#support","text":"If you get stuck you can head to our Discourse forum where you ask questions on how to use the project. You can also find ideas for contributions, and work with others on exciting projects.","title":"Support"},{"location":"coco/","text":"COCO You can view the COCO minival leaderboard here . Getting Started You'll need the following in the root of your repository: sotabench.py file - contains benchmarking logic; the server will run this on each commit requirements.txt file - Python dependencies to be installed before running sotabench.py sotabench_setup.sh (optional) - any advanced dependencies or setup, e.g. compilation You can write whatever you want in your sotabench.py file to get model predictions on the COCO dataset. For example, PyTorch users might use torchvision to load the dataset. But you will need to record your results for the server, and you'll want to avoid doing things like downloading the dataset on the server. So you should: Point to the server COCO data paths - popular datasets are pre-downloaded on the server. Include an Evaluation object in sotabench.py file to record the results. Use Caching (optional) - to speed up evaluation by hashing the first batch of predictions. We explain how to do these various steps below. Server Data Location The COCO validation data is located in the root of your repository on the server at .data/vision/coco . In this folder is contained: annotations_trainval2017.zip - containing annotations for the validation images val2017.zip - containing the validation images Your local COCO files may have a different file directory structure, so you can use control flow like below to change the data path if the script is being run on sotabench servers: from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/coco' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' This will detect if sotabench.py is being run on the server and change behaviour accordingly. How Do I Initialize an Evaluator? Add this to your code - before you start batching over the dataset and making predictions: from sotabencheval.object_detection import COCOEvaluator evaluator = COCOEvaluator ( model_name = 'My Super Model' ) If you are reproducing a model from a paper, then you can enter the arXiv ID. If you put in the same model name string as on the leaderboard then you will enable direct comparison with the paper's model. For example: from sotabencheval.object_detection import COCOEvaluator evaluator = COCOEvaluator ( model_name = 'Mask R-CNN' , paper_arxiv_id = '1703.06870' ) The above will directly compare with the result of the paper when run on the server. How Do I Evaluate Predictions? The evaluator object has an .add() method to submit predictions by batch or in full. For COCO the expected input is a list of dictionaries, where each dictionary contains detection information that will be used by the loadRes method based on the pycocotools API. Each detection can take a dictionary like the following: { 'image_id' : 397133 , 'bbox' : [ 386.1628112792969 , 69.48855590820312 , 110.14895629882812 , 278.2847595214844 ], 'score' : 0.999152421951294 , 'category_id' : 1 } For this benchmark, only bounding box detection ('bbox') is performed at present. You can do this all at once in a single call to add() , but more naturally, you will probably loop over the dataset and call the method for the outputs of each batch. That would look something like this (for a PyTorch example): ... evaluator = COCOEvaluator ( model_name = 'Mask R-CNN' , paper_arxiv_id = '1703.06870' ) with torch . no_grad (): for i , ( input , target ) in enumerate ( data_loader ): ... output = model ( input ) # potentially formatting of the output here to be a list of dicts evaluator . add ( output ) When you are done, you can get the results locally by running: evaluator . get_results () But for the server you want to save the results by running: evaluator . save () This method serialises the results and model metadata and stores to the server database. How Do I Cache Evaluation? Sotabench reruns your script on every commit. This is good because it acts like continuous integration in checking for bugs and changes, but can be annoying if the model hasn't changed and evaluation is lengthy. Fortunately sotabencheval has caching logic that you can use. The idea is that after the first batch, we hash the model outputs and the current metrics and this tells us if the model is the same given the dataset. You can include hashing within an evaluation loop like follows (in the following example for a PyTorch repository): with torch . no_grad (): for i , ( input , target ) in enumerate ( data_loader ): ... output = model ( input ) # potentially formatting of the output here to be a list of dicts evaluator . add ( output ) if evaluator . cache_exists : break evaluator . save () If the hash is the same as in the server, we infer that the model hasn't changed, so we simply return hashed results rather than running the whole evaluation again. Caching is very useful if you have large models, or a repository that is evaluating multiple models, as it speeds up evaluation significantly. A Full sotabench.py Example Below we show an implementation for a model from the torchvision repository. This incorporates all the features explained above: (a) using the server data root, (b) using the COCO Evaluator, and (c) caching the evaluation logic. Note that the torchbench dependency is just to get some processing logic and transforms; the evaluation is done with sotabencheval. import os import tqdm import torch from torch.utils.data import DataLoader from torchbench.utils import send_model_to_device from torchbench.object_detection.transforms import Compose , ConvertCocoPolysToMask , ToTensor import torchvision import PIL from sotabencheval.object_detection import COCOEvaluator from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/coco' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' def coco_data_to_device ( input , target , device : str = \"cuda\" , non_blocking : bool = True ): input = list ( inp . to ( device = device , non_blocking = non_blocking ) for inp in input ) target = [{ k : v . to ( device = device , non_blocking = non_blocking ) for k , v in t . items ()} for t in target ] return input , target def coco_collate_fn ( batch ): return tuple ( zip ( * batch )) def coco_output_transform ( output , target ): output = [{ k : v . to ( \"cpu\" ) for k , v in t . items ()} for t in output ] return output , target transforms = Compose ([ ConvertCocoPolysToMask (), ToTensor ()]) model = torchvision . models . detection . __dict__ [ 'maskrcnn_resnet50_fpn' ]( num_classes = 91 , pretrained = True ) model , device = send_model_to_device ( model , device = 'cuda' , num_gpu = 1 ) model . eval () model_output_transform = coco_output_transform send_data_to_device = coco_data_to_device collate_fn = coco_collate_fn test_dataset = torchbench . datasets . CocoDetection ( root = os . path . join ( DATA_ROOT , \"val %s \" % '2017' ), annFile = os . path . join ( DATA_ROOT , \"annotations/instances_val %s .json\" % '2017' ), transform = None , target_transform = None , transforms = transforms , download = True , ) test_loader = DataLoader ( test_dataset , batch_size = 8 , shuffle = False , num_workers = 4 , pin_memory = True , collate_fn = collate_fn , ) test_loader . no_classes = 91 # Number of classes for COCO Detection iterator = tqdm . tqdm ( test_loader , desc = \"Evaluation\" , mininterval = 5 ) evaluator = COCOEvaluator ( root = DATA_ROOT , model_name = 'Mask R-CNN (ResNet-50-FPN)' , paper_arxiv_id = '1703.06870' def prepare_for_coco_detection ( predictions ): coco_results = [] for original_id , prediction in predictions . items (): if len ( prediction ) == 0 : continue boxes = prediction [ \"boxes\" ] boxes = convert_to_xywh ( boxes ) . tolist () scores = prediction [ \"scores\" ] . tolist () labels = prediction [ \"labels\" ] . tolist () coco_results . extend ( [ { \"image_id\" : original_id , \"category_id\" : labels [ k ], \"bbox\" : box , \"score\" : scores [ k ], } for k , box in enumerate ( boxes ) ] ) return coco_results def convert_to_xywh ( boxes ): xmin , ymin , xmax , ymax = boxes . unbind ( 1 ) return torch . stack (( xmin , ymin , xmax - xmin , ymax - ymin ), dim = 1 ) with torch . no_grad (): for i , ( input , target ) in enumerate ( iterator ): input , target = send_data_to_device ( input , target , device = device ) original_output = model ( input ) output , target = model_output_transform ( original_output , target ) result = { tar [ \"image_id\" ] . item (): out for tar , out in zip ( target , output ) } result = prepare_for_coco_detection ( result ) evaluator . update ( result ) if evaluator . cache_exists : break evaluator . save () Need More Help? Head on over to the Computer Vision section of the sotabench forums if you have any questions or difficulties.","title":"COCO"},{"location":"coco/#coco","text":"You can view the COCO minival leaderboard here .","title":"COCO"},{"location":"coco/#getting-started","text":"You'll need the following in the root of your repository: sotabench.py file - contains benchmarking logic; the server will run this on each commit requirements.txt file - Python dependencies to be installed before running sotabench.py sotabench_setup.sh (optional) - any advanced dependencies or setup, e.g. compilation You can write whatever you want in your sotabench.py file to get model predictions on the COCO dataset. For example, PyTorch users might use torchvision to load the dataset. But you will need to record your results for the server, and you'll want to avoid doing things like downloading the dataset on the server. So you should: Point to the server COCO data paths - popular datasets are pre-downloaded on the server. Include an Evaluation object in sotabench.py file to record the results. Use Caching (optional) - to speed up evaluation by hashing the first batch of predictions. We explain how to do these various steps below.","title":"Getting Started"},{"location":"coco/#server-data-location","text":"The COCO validation data is located in the root of your repository on the server at .data/vision/coco . In this folder is contained: annotations_trainval2017.zip - containing annotations for the validation images val2017.zip - containing the validation images Your local COCO files may have a different file directory structure, so you can use control flow like below to change the data path if the script is being run on sotabench servers: from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/coco' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' This will detect if sotabench.py is being run on the server and change behaviour accordingly.","title":"Server Data Location"},{"location":"coco/#how-do-i-initialize-an-evaluator","text":"Add this to your code - before you start batching over the dataset and making predictions: from sotabencheval.object_detection import COCOEvaluator evaluator = COCOEvaluator ( model_name = 'My Super Model' ) If you are reproducing a model from a paper, then you can enter the arXiv ID. If you put in the same model name string as on the leaderboard then you will enable direct comparison with the paper's model. For example: from sotabencheval.object_detection import COCOEvaluator evaluator = COCOEvaluator ( model_name = 'Mask R-CNN' , paper_arxiv_id = '1703.06870' ) The above will directly compare with the result of the paper when run on the server.","title":"How Do I Initialize an Evaluator?"},{"location":"coco/#how-do-i-evaluate-predictions","text":"The evaluator object has an .add() method to submit predictions by batch or in full. For COCO the expected input is a list of dictionaries, where each dictionary contains detection information that will be used by the loadRes method based on the pycocotools API. Each detection can take a dictionary like the following: { 'image_id' : 397133 , 'bbox' : [ 386.1628112792969 , 69.48855590820312 , 110.14895629882812 , 278.2847595214844 ], 'score' : 0.999152421951294 , 'category_id' : 1 } For this benchmark, only bounding box detection ('bbox') is performed at present. You can do this all at once in a single call to add() , but more naturally, you will probably loop over the dataset and call the method for the outputs of each batch. That would look something like this (for a PyTorch example): ... evaluator = COCOEvaluator ( model_name = 'Mask R-CNN' , paper_arxiv_id = '1703.06870' ) with torch . no_grad (): for i , ( input , target ) in enumerate ( data_loader ): ... output = model ( input ) # potentially formatting of the output here to be a list of dicts evaluator . add ( output ) When you are done, you can get the results locally by running: evaluator . get_results () But for the server you want to save the results by running: evaluator . save () This method serialises the results and model metadata and stores to the server database.","title":"How Do I Evaluate Predictions?"},{"location":"coco/#how-do-i-cache-evaluation","text":"Sotabench reruns your script on every commit. This is good because it acts like continuous integration in checking for bugs and changes, but can be annoying if the model hasn't changed and evaluation is lengthy. Fortunately sotabencheval has caching logic that you can use. The idea is that after the first batch, we hash the model outputs and the current metrics and this tells us if the model is the same given the dataset. You can include hashing within an evaluation loop like follows (in the following example for a PyTorch repository): with torch . no_grad (): for i , ( input , target ) in enumerate ( data_loader ): ... output = model ( input ) # potentially formatting of the output here to be a list of dicts evaluator . add ( output ) if evaluator . cache_exists : break evaluator . save () If the hash is the same as in the server, we infer that the model hasn't changed, so we simply return hashed results rather than running the whole evaluation again. Caching is very useful if you have large models, or a repository that is evaluating multiple models, as it speeds up evaluation significantly.","title":"How Do I Cache Evaluation?"},{"location":"coco/#a-full-sotabenchpy-example","text":"Below we show an implementation for a model from the torchvision repository. This incorporates all the features explained above: (a) using the server data root, (b) using the COCO Evaluator, and (c) caching the evaluation logic. Note that the torchbench dependency is just to get some processing logic and transforms; the evaluation is done with sotabencheval. import os import tqdm import torch from torch.utils.data import DataLoader from torchbench.utils import send_model_to_device from torchbench.object_detection.transforms import Compose , ConvertCocoPolysToMask , ToTensor import torchvision import PIL from sotabencheval.object_detection import COCOEvaluator from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/coco' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' def coco_data_to_device ( input , target , device : str = \"cuda\" , non_blocking : bool = True ): input = list ( inp . to ( device = device , non_blocking = non_blocking ) for inp in input ) target = [{ k : v . to ( device = device , non_blocking = non_blocking ) for k , v in t . items ()} for t in target ] return input , target def coco_collate_fn ( batch ): return tuple ( zip ( * batch )) def coco_output_transform ( output , target ): output = [{ k : v . to ( \"cpu\" ) for k , v in t . items ()} for t in output ] return output , target transforms = Compose ([ ConvertCocoPolysToMask (), ToTensor ()]) model = torchvision . models . detection . __dict__ [ 'maskrcnn_resnet50_fpn' ]( num_classes = 91 , pretrained = True ) model , device = send_model_to_device ( model , device = 'cuda' , num_gpu = 1 ) model . eval () model_output_transform = coco_output_transform send_data_to_device = coco_data_to_device collate_fn = coco_collate_fn test_dataset = torchbench . datasets . CocoDetection ( root = os . path . join ( DATA_ROOT , \"val %s \" % '2017' ), annFile = os . path . join ( DATA_ROOT , \"annotations/instances_val %s .json\" % '2017' ), transform = None , target_transform = None , transforms = transforms , download = True , ) test_loader = DataLoader ( test_dataset , batch_size = 8 , shuffle = False , num_workers = 4 , pin_memory = True , collate_fn = collate_fn , ) test_loader . no_classes = 91 # Number of classes for COCO Detection iterator = tqdm . tqdm ( test_loader , desc = \"Evaluation\" , mininterval = 5 ) evaluator = COCOEvaluator ( root = DATA_ROOT , model_name = 'Mask R-CNN (ResNet-50-FPN)' , paper_arxiv_id = '1703.06870' def prepare_for_coco_detection ( predictions ): coco_results = [] for original_id , prediction in predictions . items (): if len ( prediction ) == 0 : continue boxes = prediction [ \"boxes\" ] boxes = convert_to_xywh ( boxes ) . tolist () scores = prediction [ \"scores\" ] . tolist () labels = prediction [ \"labels\" ] . tolist () coco_results . extend ( [ { \"image_id\" : original_id , \"category_id\" : labels [ k ], \"bbox\" : box , \"score\" : scores [ k ], } for k , box in enumerate ( boxes ) ] ) return coco_results def convert_to_xywh ( boxes ): xmin , ymin , xmax , ymax = boxes . unbind ( 1 ) return torch . stack (( xmin , ymin , xmax - xmin , ymax - ymin ), dim = 1 ) with torch . no_grad (): for i , ( input , target ) in enumerate ( iterator ): input , target = send_data_to_device ( input , target , device = device ) original_output = model ( input ) output , target = model_output_transform ( original_output , target ) result = { tar [ \"image_id\" ] . item (): out for tar , out in zip ( target , output ) } result = prepare_for_coco_detection ( result ) evaluator . update ( result ) if evaluator . cache_exists : break evaluator . save ()","title":"A Full sotabench.py Example"},{"location":"coco/#need-more-help","text":"Head on over to the Computer Vision section of the sotabench forums if you have any questions or difficulties.","title":"Need More Help?"},{"location":"imagenet/","text":"ImageNet You can view the ImageNet leaderboard here . Getting Started You'll need the following in the root of your repository: sotabench.py file - contains benchmarking logic; the server will run this on each commit requirements.txt file - Python dependencies to be installed before running sotabench.py sotabench_setup.sh (optional) - any advanced dependencies or setup, e.g. compilation You can write whatever you want in your sotabench.py file to get model predictions on the ImageNet dataset. For example, PyTorch users might use torchvision to load the dataset. But you will need to record your results for the server, and you'll want to avoid doing things like downloading the dataset on the server. So you should: Point to the server ImageNet data paths - popular datasets are pre-downloaded on the server. Include an Evaluation object in sotabench.py file to record the results. Use Caching (optional) - to speed up evaluation by hashing the first batch of predictions. We explain how to do these various steps below. Server Data Location The ImageNet validation data is located in the root of your repository on the server at .data/vision/imagenet . In this folder is contained: ILSVRC2012_devkit_t12.tar.gz - containing metadata ILSVRC2012_img_val.tar - containing the validation images Your local ImageNet files may have a different file directory structure, so you can use control flow like below to change the data path if the script is being run on sotabench servers: from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/imagenet' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' This will detect if sotabench.py is being run on the server and change behaviour accordingly. How Do I Initialize an Evaluator? Add this to your code - before you start batching over the dataset and making predictions: from sotabencheval.image_classification import ImageNetEvaluator evaluator = ImageNetEvaluator ( model_name = 'My Super Model' ) If you are reproducing a model from a paper, then you can enter the arXiv ID. If you put in the same model name string as on the leaderboard then you will enable direct comparison with the paper's model. For example: from sotabencheval.image_classification import ImageNetEvaluator evaluator = ImageNetEvaluator ( model_name = 'FixResNeXt-101 32x48d' , paper_arxiv_id = '1906.06423' ) The above will directly compare with the result of the paper when run on the server. How Do I Evaluate Predictions? The evaluator object has an .add() method to submit predictions by batch or in full. For ImageNet the expected input as a dictionary of outputs, where each key is an image ID from ImageNet and each value is a list or 1D numpy array of logits for that image ID. For example: evaluator . add ({ 'ILSVRC2012_val_00000293' : np . array ([ 1.04243 , ... ]), 'ILSVRC2012_val_00000294' : np . array ([ - 2.3677 , ... ])}) You can do this all at once in a single call to add() , but more naturally, you will probably loop over the dataset and call the method for the outputs of each batch. That would like something like this (for a PyTorch example): for i , ( input , target ) in enumerate ( test_loader ): input = input . to ( device = 'cuda' , non_blocking = True ) target = target . to ( device = 'cuda' , non_blocking = True ) output = model ( input ) image_ids = [ get_img_id ( img [ 0 ]) for img in test_loader . dataset . imgs [ i * test_loader . batch_size :( i + 1 ) * test_loader . batch_size ]] evaluator . add ( dict ( zip ( image_ids , list ( output . cpu () . numpy ())))) When you are done, you can get the results locally by running: evaluator . get_results () But for the server you want to save the results by running: evaluator . save () This method serialises the results and model metadata and stores to the server database. How Do I Cache Evaluation? Sotabench reruns your script on every commit. This is good because it acts like continuous integration in checking for bugs and changes, but can be annoying if the model hasn't changed and evaluation is lengthy. Fortunately sotabencheval has caching logic that you can use. The idea is that after the first batch, we hash the model outputs and the current metrics and this tells us if the model is the same given the dataset. You can include hashing within an evaluation loop like follows (in the following example for a PyTorch repository): with torch . no_grad (): for i , ( input , target ) in enumerate ( test_loader ): input = input . to ( device = 'cuda' , non_blocking = True ) target = target . to ( device = 'cuda' , non_blocking = True ) output = model ( input ) image_ids = [ get_img_id ( img [ 0 ]) for img in test_loader . dataset . imgs [ i * test_loader . batch_size :( i + 1 ) * test_loader . batch_size ]] evaluator . add ( dict ( zip ( image_ids , list ( output . cpu () . numpy ())))) if evaluator . cache_exists : break evaluator . save () If the hash is the same as in the server, we infer that the model hasn't changed, so we simply return hashed results rather than running the whole evaluation again. Caching is very useful if you have large models, or a repository that is evaluating multiple models, as it speeds up evaluation significantly. A full sotabench.py example Below we show an implementation for a model from the torchvision repository. This incorporates all the features explained above: (a) using the server data root, (b) using the ImageNet Evaluator, and (c) caching the evaluation logic: import numpy as np import PIL import torch from torchvision.models.resnet import resnext101_32x8d import torchvision.transforms as transforms from torchvision.datasets import ImageNet from torch.utils.data import DataLoader from sotabencheval.image_classification import ImageNetEvaluator from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/imagenet' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' model = resnext101_32x8d ( pretrained = True ) input_transform = transforms . Compose ([ transforms . Resize ( 256 , PIL . Image . BICUBIC ), transforms . CenterCrop ( 224 ), transforms . ToTensor (), transforms . Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]), ]) test_dataset = ImageNet ( DATA_ROOT , split = \"val\" , transform = input_transform , target_transform = None , download = True , ) test_loader = DataLoader ( test_dataset , batch_size = 128 , shuffle = False , num_workers = 4 , pin_memory = True , ) model = model . cuda () model . eval () evaluator = ImageNetEvaluator ( model_name = 'ResNeXt-101-32x8d' , paper_arxiv_id = '1611.05431' ) def get_img_id ( image_name ): return image_name . split ( '/' )[ - 1 ] . replace ( '.JPEG' , '' ) with torch . no_grad (): for i , ( input , target ) in enumerate ( test_loader ): input = input . to ( device = 'cuda' , non_blocking = True ) target = target . to ( device = 'cuda' , non_blocking = True ) output = model ( input ) image_ids = [ get_img_id ( img [ 0 ]) for img in test_loader . dataset . imgs [ i * test_loader . batch_size :( i + 1 ) * test_loader . batch_size ]] evaluator . add ( dict ( zip ( image_ids , list ( output . cpu () . numpy ())))) if evaluator . cache_exists : break evaluator . save () Need More Help? Head on over to the Computer Vision section of the sotabench forums if you have any questions or difficulties.","title":"ImageNet"},{"location":"imagenet/#imagenet","text":"You can view the ImageNet leaderboard here .","title":"ImageNet"},{"location":"imagenet/#getting-started","text":"You'll need the following in the root of your repository: sotabench.py file - contains benchmarking logic; the server will run this on each commit requirements.txt file - Python dependencies to be installed before running sotabench.py sotabench_setup.sh (optional) - any advanced dependencies or setup, e.g. compilation You can write whatever you want in your sotabench.py file to get model predictions on the ImageNet dataset. For example, PyTorch users might use torchvision to load the dataset. But you will need to record your results for the server, and you'll want to avoid doing things like downloading the dataset on the server. So you should: Point to the server ImageNet data paths - popular datasets are pre-downloaded on the server. Include an Evaluation object in sotabench.py file to record the results. Use Caching (optional) - to speed up evaluation by hashing the first batch of predictions. We explain how to do these various steps below.","title":"Getting Started"},{"location":"imagenet/#server-data-location","text":"The ImageNet validation data is located in the root of your repository on the server at .data/vision/imagenet . In this folder is contained: ILSVRC2012_devkit_t12.tar.gz - containing metadata ILSVRC2012_img_val.tar - containing the validation images Your local ImageNet files may have a different file directory structure, so you can use control flow like below to change the data path if the script is being run on sotabench servers: from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/imagenet' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' This will detect if sotabench.py is being run on the server and change behaviour accordingly.","title":"Server Data Location"},{"location":"imagenet/#how-do-i-initialize-an-evaluator","text":"Add this to your code - before you start batching over the dataset and making predictions: from sotabencheval.image_classification import ImageNetEvaluator evaluator = ImageNetEvaluator ( model_name = 'My Super Model' ) If you are reproducing a model from a paper, then you can enter the arXiv ID. If you put in the same model name string as on the leaderboard then you will enable direct comparison with the paper's model. For example: from sotabencheval.image_classification import ImageNetEvaluator evaluator = ImageNetEvaluator ( model_name = 'FixResNeXt-101 32x48d' , paper_arxiv_id = '1906.06423' ) The above will directly compare with the result of the paper when run on the server.","title":"How Do I Initialize an Evaluator?"},{"location":"imagenet/#how-do-i-evaluate-predictions","text":"The evaluator object has an .add() method to submit predictions by batch or in full. For ImageNet the expected input as a dictionary of outputs, where each key is an image ID from ImageNet and each value is a list or 1D numpy array of logits for that image ID. For example: evaluator . add ({ 'ILSVRC2012_val_00000293' : np . array ([ 1.04243 , ... ]), 'ILSVRC2012_val_00000294' : np . array ([ - 2.3677 , ... ])}) You can do this all at once in a single call to add() , but more naturally, you will probably loop over the dataset and call the method for the outputs of each batch. That would like something like this (for a PyTorch example): for i , ( input , target ) in enumerate ( test_loader ): input = input . to ( device = 'cuda' , non_blocking = True ) target = target . to ( device = 'cuda' , non_blocking = True ) output = model ( input ) image_ids = [ get_img_id ( img [ 0 ]) for img in test_loader . dataset . imgs [ i * test_loader . batch_size :( i + 1 ) * test_loader . batch_size ]] evaluator . add ( dict ( zip ( image_ids , list ( output . cpu () . numpy ())))) When you are done, you can get the results locally by running: evaluator . get_results () But for the server you want to save the results by running: evaluator . save () This method serialises the results and model metadata and stores to the server database.","title":"How Do I Evaluate Predictions?"},{"location":"imagenet/#how-do-i-cache-evaluation","text":"Sotabench reruns your script on every commit. This is good because it acts like continuous integration in checking for bugs and changes, but can be annoying if the model hasn't changed and evaluation is lengthy. Fortunately sotabencheval has caching logic that you can use. The idea is that after the first batch, we hash the model outputs and the current metrics and this tells us if the model is the same given the dataset. You can include hashing within an evaluation loop like follows (in the following example for a PyTorch repository): with torch . no_grad (): for i , ( input , target ) in enumerate ( test_loader ): input = input . to ( device = 'cuda' , non_blocking = True ) target = target . to ( device = 'cuda' , non_blocking = True ) output = model ( input ) image_ids = [ get_img_id ( img [ 0 ]) for img in test_loader . dataset . imgs [ i * test_loader . batch_size :( i + 1 ) * test_loader . batch_size ]] evaluator . add ( dict ( zip ( image_ids , list ( output . cpu () . numpy ())))) if evaluator . cache_exists : break evaluator . save () If the hash is the same as in the server, we infer that the model hasn't changed, so we simply return hashed results rather than running the whole evaluation again. Caching is very useful if you have large models, or a repository that is evaluating multiple models, as it speeds up evaluation significantly.","title":"How Do I Cache Evaluation?"},{"location":"imagenet/#a-full-sotabenchpy-example","text":"Below we show an implementation for a model from the torchvision repository. This incorporates all the features explained above: (a) using the server data root, (b) using the ImageNet Evaluator, and (c) caching the evaluation logic: import numpy as np import PIL import torch from torchvision.models.resnet import resnext101_32x8d import torchvision.transforms as transforms from torchvision.datasets import ImageNet from torch.utils.data import DataLoader from sotabencheval.image_classification import ImageNetEvaluator from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/imagenet' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' model = resnext101_32x8d ( pretrained = True ) input_transform = transforms . Compose ([ transforms . Resize ( 256 , PIL . Image . BICUBIC ), transforms . CenterCrop ( 224 ), transforms . ToTensor (), transforms . Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]), ]) test_dataset = ImageNet ( DATA_ROOT , split = \"val\" , transform = input_transform , target_transform = None , download = True , ) test_loader = DataLoader ( test_dataset , batch_size = 128 , shuffle = False , num_workers = 4 , pin_memory = True , ) model = model . cuda () model . eval () evaluator = ImageNetEvaluator ( model_name = 'ResNeXt-101-32x8d' , paper_arxiv_id = '1611.05431' ) def get_img_id ( image_name ): return image_name . split ( '/' )[ - 1 ] . replace ( '.JPEG' , '' ) with torch . no_grad (): for i , ( input , target ) in enumerate ( test_loader ): input = input . to ( device = 'cuda' , non_blocking = True ) target = target . to ( device = 'cuda' , non_blocking = True ) output = model ( input ) image_ids = [ get_img_id ( img [ 0 ]) for img in test_loader . dataset . imgs [ i * test_loader . batch_size :( i + 1 ) * test_loader . batch_size ]] evaluator . add ( dict ( zip ( image_ids , list ( output . cpu () . numpy ())))) if evaluator . cache_exists : break evaluator . save ()","title":"A full sotabench.py example"},{"location":"imagenet/#need-more-help","text":"Head on over to the Computer Vision section of the sotabench forums if you have any questions or difficulties.","title":"Need More Help?"},{"location":"pascalvoc/","text":"PASCAL VOC 2012 You can view the PASCAL VOC 2012 leaderboard here . Getting Started You'll need the following in the root of your repository: sotabench.py file - contains benchmarking logic; the server will run this on each commit requirements.txt file - Python dependencies to be installed before running sotabench.py sotabench_setup.sh (optional) - any advanced dependencies or setup, e.g. compilation You can write whatever you want in your sotabench.py file to get model predictions on the VOC 2012 dataset. For example, PyTorch users might use torchvision to load the dataset. But you will need to record your results for the server, and you'll want to avoid doing things like downloading the dataset on the server. So you should: Point to the server VOC 2012 data paths - popular datasets are pre-downloaded on the server. Include an Evaluation object in sotabench.py file to record the results. Use Caching (optional) - to speed up evaluation by hashing the first batch of predictions. We explain how to do these various steps below. Server Data Location The VOC 2012 data is located in the root of your repository on the server at .data/vision/voc2012 . In this folder is contained: VOCtrainval_11-May-2012.tar - containing validation images and annotations Your local VOC 2012 files may have a different file directory structure, so you can use control flow like below to change the data path if the script is being run on sotabench servers: from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/voc2012' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' This will detect if sotabench.py is being run on the server and change behaviour accordingly. How Do I Initialize an Evaluator? Add this to your code - before you start batching over the dataset and making predictions: from sotabencheval.semantic_segmentation import PASCALVOCEvaluator evaluator = PASCALVOCEvaluator ( model_name = 'My Super Model' ) If you are reproducing a model from a paper, then you can enter the arXiv ID. If you put in the same model name string as on the leaderboard then you will enable direct comparison with the paper. For example: from sotabencheval.semantic_segmentation import PASCALVOCEvaluator evaluator = PASCALVOCEvaluator ( model_name = 'PSPNet' , paper_arxiv_id = '1612.01105' ) The above will directly compare with the result of the paper when run on the server. How Do I Evaluate Predictions? The evaluator object has an .add() method to submit predictions by batch or in full. For PASCAL there are two required arguments: outputs , a 1D np.ndarray of semantic class predictions per label, and targets , a 1D np.ndarray of ground truth semantic classes per pixel. In other words, it requires flattened inputs and outputs. To elaborate, suppose you are making predictions, batch by batch, and have your model output and the original targets with batch_size 32 , and image size (520, 480) . The shape of your outputs might look like: batch_output . shape >> ( 32 , 21 , 520 , 480 ) # where 21 is the number of VOC classes batch_target . shape >> ( 32 , 520 , 480 ) We can flatten the entire output and targets to 1D vectors for each pixel: flattened_batch_output . shape >> ( 7987200 ) # flatten by taking the max class prediction # (batch_output.argmax(1).flatten() in torch with class as second dimension) flattened_batch_target . shape >> ( 7987200 ) # (batch_target.flatten() in torch) The output might look something like this: flattened_batch_output >> array ([ 6 , 6 , 6 , 6 , 6 , ... ]) flattened_batch_target >> array ([ 6 , 6 , 6 , 6 , 6 , ... ]) In both cases, the prediction and ground truth have class 6 as the semantic label for the first 5 pixels - so the model is correct. These flattened arrays can then be passed into the .add() method of the evaluator my_evaluator . update ( outputs = flattened_batch_output , targets = flattened_batch_target ) You can do this all at once in a single call to add() , but more naturally, you will probably loop over the dataset and call the method for the outputs of each batch. That would like something like this (for a PyTorch example): evaluator = PASCALVOCEvaluator ( root = DATA_ROOT , dataset_year = '2012' , split = 'val' , model_name = 'FCN (ResNet-101)' , paper_arxiv_id = '1605.06211' ) with torch . no_grad (): for image , target in tqdm . tqdm ( data_loader_test ): image , target = image . to ( 'cuda' ), target . to ( 'cuda' ) output = model ( image ) output = output [ 'out' ] evaluator . add ( output . argmax ( 1 ) . flatten () . cpu () . numpy (), target . flatten () . cpu () . numpy ()) When you are done, you can get the results locally by running: evaluator . get_results () But for the server you want to save the results by running: evaluator . save () This method serialises the results and model metadata and stores to the server database. How Do I Cache Evaluation? Sotabench reruns your script on every commit. This is good because it acts like continuous integration in checking for bugs and changes, but can be annoying if the model hasn't changed and evaluation is lengthy. Fortunately sotabencheval has caching logic that you can use. The idea is that after the first batch, we hash the model outputs and the current metrics and this tells us if the model is the same given the dataset. You can include hashing within an evaluation loop like follows (in the following example for a PyTorch repository): evaluator = PASCALVOCEvaluator ( root = './data' , dataset_year = '2012' , split = 'val' , model_name = 'FCN (ResNet-101)' , paper_arxiv_id = '1605.06211' ) with torch . no_grad (): for image , target in tqdm . tqdm ( data_loader_test ): image , target = image . to ( 'cuda' ), target . to ( 'cuda' ) output = model ( image ) output = output [ 'out' ] evaluator . add ( output . argmax ( 1 ) . flatten () . cpu () . numpy (), target . flatten () . cpu () . numpy ()) if evaluator . cache_exists : break evaluator . save () If the hash is the same as in the server, we infer that the model hasn't changed, so we simply return hashed results rather than running the whole evaluation again. Caching is very useful if you have large models, or a repository that is evaluating multiple models, as it speeds up evaluation significantly. A full sotabench.py example Below we show an implementation for a model from the torchvision repository. This incorporates all the features explained above: (a) using the server data root, (b) using the ImageNet Evaluator, and (c) caching the evaluation logic: import PIL import torch import torchvision from torchvision.models.segmentation import fcn_resnet101 import torchvision.transforms as transforms import tqdm from sotabench_transforms import Normalize , Compose , Resize , ToTensor from sotabencheval.semantic_segmentation import PASCALVOCEvaluator from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/voc2012' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' MODEL_NAME = 'fcn_resnet101' def cat_list ( images , fill_value = 0 ): max_size = tuple ( max ( s ) for s in zip ( * [ img . shape for img in images ])) batch_shape = ( len ( images ),) + max_size batched_imgs = images [ 0 ] . new ( * batch_shape ) . fill_ ( fill_value ) for img , pad_img in zip ( images , batched_imgs ): pad_img [ ... , : img . shape [ - 2 ], : img . shape [ - 1 ]] . copy_ ( img ) return batched_imgs def collate_fn ( batch ): images , targets = list ( zip ( * batch )) batched_imgs = cat_list ( images , fill_value = 0 ) batched_targets = cat_list ( targets , fill_value = 255 ) return batched_imgs , batched_targets device = torch . device ( 'cuda' ) normalize = Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]) my_transforms = Compose ([ Resize (( 520 , 480 )), ToTensor (), normalize ]) dataset_test = torchvision . datasets . VOCSegmentation ( root = DATA_ROOT , year = '2012' , image_set = \"val\" , transforms = my_transforms , download = True ) test_sampler = torch . utils . data . SequentialSampler ( dataset_test ) data_loader_test = torch . utils . data . DataLoader ( dataset_test , batch_size = 32 , sampler = test_sampler , num_workers = 4 , collate_fn = collate_fn ) model = torchvision . models . segmentation . __dict__ [ 'fcn_resnet101' ]( num_classes = 21 , pretrained = True ) model . to ( device ) model . eval () evaluator = PASCALVOCEvaluator ( root = DATA_ROOT , dataset_year = '2012' , split = 'val' , model_name = 'FCN (ResNet-101)' , paper_arxiv_id = '1605.06211' ) with torch . no_grad (): for image , target in tqdm . tqdm ( data_loader_test ): image , target = image . to ( 'cuda' ), target . to ( 'cuda' ) output = model ( image ) output = output [ 'out' ] evaluator . add ( output . argmax ( 1 ) . flatten () . cpu () . numpy (), target . flatten () . cpu () . numpy ()) if evaluator . cache_exists : break evaluator . save () Need More Help? Head on over to the Computer Vision section of the sotabench forums if you have any questions or difficulties.","title":"PASCAL VOC 2012"},{"location":"pascalvoc/#pascal-voc-2012","text":"You can view the PASCAL VOC 2012 leaderboard here .","title":"PASCAL VOC 2012"},{"location":"pascalvoc/#getting-started","text":"You'll need the following in the root of your repository: sotabench.py file - contains benchmarking logic; the server will run this on each commit requirements.txt file - Python dependencies to be installed before running sotabench.py sotabench_setup.sh (optional) - any advanced dependencies or setup, e.g. compilation You can write whatever you want in your sotabench.py file to get model predictions on the VOC 2012 dataset. For example, PyTorch users might use torchvision to load the dataset. But you will need to record your results for the server, and you'll want to avoid doing things like downloading the dataset on the server. So you should: Point to the server VOC 2012 data paths - popular datasets are pre-downloaded on the server. Include an Evaluation object in sotabench.py file to record the results. Use Caching (optional) - to speed up evaluation by hashing the first batch of predictions. We explain how to do these various steps below.","title":"Getting Started"},{"location":"pascalvoc/#server-data-location","text":"The VOC 2012 data is located in the root of your repository on the server at .data/vision/voc2012 . In this folder is contained: VOCtrainval_11-May-2012.tar - containing validation images and annotations Your local VOC 2012 files may have a different file directory structure, so you can use control flow like below to change the data path if the script is being run on sotabench servers: from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/voc2012' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' This will detect if sotabench.py is being run on the server and change behaviour accordingly.","title":"Server Data Location"},{"location":"pascalvoc/#how-do-i-initialize-an-evaluator","text":"Add this to your code - before you start batching over the dataset and making predictions: from sotabencheval.semantic_segmentation import PASCALVOCEvaluator evaluator = PASCALVOCEvaluator ( model_name = 'My Super Model' ) If you are reproducing a model from a paper, then you can enter the arXiv ID. If you put in the same model name string as on the leaderboard then you will enable direct comparison with the paper. For example: from sotabencheval.semantic_segmentation import PASCALVOCEvaluator evaluator = PASCALVOCEvaluator ( model_name = 'PSPNet' , paper_arxiv_id = '1612.01105' ) The above will directly compare with the result of the paper when run on the server.","title":"How Do I Initialize an Evaluator?"},{"location":"pascalvoc/#how-do-i-evaluate-predictions","text":"The evaluator object has an .add() method to submit predictions by batch or in full. For PASCAL there are two required arguments: outputs , a 1D np.ndarray of semantic class predictions per label, and targets , a 1D np.ndarray of ground truth semantic classes per pixel. In other words, it requires flattened inputs and outputs. To elaborate, suppose you are making predictions, batch by batch, and have your model output and the original targets with batch_size 32 , and image size (520, 480) . The shape of your outputs might look like: batch_output . shape >> ( 32 , 21 , 520 , 480 ) # where 21 is the number of VOC classes batch_target . shape >> ( 32 , 520 , 480 ) We can flatten the entire output and targets to 1D vectors for each pixel: flattened_batch_output . shape >> ( 7987200 ) # flatten by taking the max class prediction # (batch_output.argmax(1).flatten() in torch with class as second dimension) flattened_batch_target . shape >> ( 7987200 ) # (batch_target.flatten() in torch) The output might look something like this: flattened_batch_output >> array ([ 6 , 6 , 6 , 6 , 6 , ... ]) flattened_batch_target >> array ([ 6 , 6 , 6 , 6 , 6 , ... ]) In both cases, the prediction and ground truth have class 6 as the semantic label for the first 5 pixels - so the model is correct. These flattened arrays can then be passed into the .add() method of the evaluator my_evaluator . update ( outputs = flattened_batch_output , targets = flattened_batch_target ) You can do this all at once in a single call to add() , but more naturally, you will probably loop over the dataset and call the method for the outputs of each batch. That would like something like this (for a PyTorch example): evaluator = PASCALVOCEvaluator ( root = DATA_ROOT , dataset_year = '2012' , split = 'val' , model_name = 'FCN (ResNet-101)' , paper_arxiv_id = '1605.06211' ) with torch . no_grad (): for image , target in tqdm . tqdm ( data_loader_test ): image , target = image . to ( 'cuda' ), target . to ( 'cuda' ) output = model ( image ) output = output [ 'out' ] evaluator . add ( output . argmax ( 1 ) . flatten () . cpu () . numpy (), target . flatten () . cpu () . numpy ()) When you are done, you can get the results locally by running: evaluator . get_results () But for the server you want to save the results by running: evaluator . save () This method serialises the results and model metadata and stores to the server database.","title":"How Do I Evaluate Predictions?"},{"location":"pascalvoc/#how-do-i-cache-evaluation","text":"Sotabench reruns your script on every commit. This is good because it acts like continuous integration in checking for bugs and changes, but can be annoying if the model hasn't changed and evaluation is lengthy. Fortunately sotabencheval has caching logic that you can use. The idea is that after the first batch, we hash the model outputs and the current metrics and this tells us if the model is the same given the dataset. You can include hashing within an evaluation loop like follows (in the following example for a PyTorch repository): evaluator = PASCALVOCEvaluator ( root = './data' , dataset_year = '2012' , split = 'val' , model_name = 'FCN (ResNet-101)' , paper_arxiv_id = '1605.06211' ) with torch . no_grad (): for image , target in tqdm . tqdm ( data_loader_test ): image , target = image . to ( 'cuda' ), target . to ( 'cuda' ) output = model ( image ) output = output [ 'out' ] evaluator . add ( output . argmax ( 1 ) . flatten () . cpu () . numpy (), target . flatten () . cpu () . numpy ()) if evaluator . cache_exists : break evaluator . save () If the hash is the same as in the server, we infer that the model hasn't changed, so we simply return hashed results rather than running the whole evaluation again. Caching is very useful if you have large models, or a repository that is evaluating multiple models, as it speeds up evaluation significantly.","title":"How Do I Cache Evaluation?"},{"location":"pascalvoc/#a-full-sotabenchpy-example","text":"Below we show an implementation for a model from the torchvision repository. This incorporates all the features explained above: (a) using the server data root, (b) using the ImageNet Evaluator, and (c) caching the evaluation logic: import PIL import torch import torchvision from torchvision.models.segmentation import fcn_resnet101 import torchvision.transforms as transforms import tqdm from sotabench_transforms import Normalize , Compose , Resize , ToTensor from sotabencheval.semantic_segmentation import PASCALVOCEvaluator from sotabencheval.utils import is_server if is_server (): DATA_ROOT = './.data/vision/voc2012' else : # local settings DATA_ROOT = '/home/ubuntu/my_data/' MODEL_NAME = 'fcn_resnet101' def cat_list ( images , fill_value = 0 ): max_size = tuple ( max ( s ) for s in zip ( * [ img . shape for img in images ])) batch_shape = ( len ( images ),) + max_size batched_imgs = images [ 0 ] . new ( * batch_shape ) . fill_ ( fill_value ) for img , pad_img in zip ( images , batched_imgs ): pad_img [ ... , : img . shape [ - 2 ], : img . shape [ - 1 ]] . copy_ ( img ) return batched_imgs def collate_fn ( batch ): images , targets = list ( zip ( * batch )) batched_imgs = cat_list ( images , fill_value = 0 ) batched_targets = cat_list ( targets , fill_value = 255 ) return batched_imgs , batched_targets device = torch . device ( 'cuda' ) normalize = Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]) my_transforms = Compose ([ Resize (( 520 , 480 )), ToTensor (), normalize ]) dataset_test = torchvision . datasets . VOCSegmentation ( root = DATA_ROOT , year = '2012' , image_set = \"val\" , transforms = my_transforms , download = True ) test_sampler = torch . utils . data . SequentialSampler ( dataset_test ) data_loader_test = torch . utils . data . DataLoader ( dataset_test , batch_size = 32 , sampler = test_sampler , num_workers = 4 , collate_fn = collate_fn ) model = torchvision . models . segmentation . __dict__ [ 'fcn_resnet101' ]( num_classes = 21 , pretrained = True ) model . to ( device ) model . eval () evaluator = PASCALVOCEvaluator ( root = DATA_ROOT , dataset_year = '2012' , split = 'val' , model_name = 'FCN (ResNet-101)' , paper_arxiv_id = '1605.06211' ) with torch . no_grad (): for image , target in tqdm . tqdm ( data_loader_test ): image , target = image . to ( 'cuda' ), target . to ( 'cuda' ) output = model ( image ) output = output [ 'out' ] evaluator . add ( output . argmax ( 1 ) . flatten () . cpu () . numpy (), target . flatten () . cpu () . numpy ()) if evaluator . cache_exists : break evaluator . save ()","title":"A full sotabench.py example"},{"location":"pascalvoc/#need-more-help","text":"Head on over to the Computer Vision section of the sotabench forums if you have any questions or difficulties.","title":"Need More Help?"}]}